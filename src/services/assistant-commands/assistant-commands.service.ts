import { Injectable } from '@nestjs/common';
import { OpenaiAssistantService } from 'src/openai-assistant/openai-assistant.service';
import { Context, Markup } from 'telegraf';
import { AssistantSettingsService } from '../assistant-settings/assistant-settings.service';
import axios from 'axios';
import * as fs from 'fs';
import { IBotContext } from '../commands/commands.interface';
import { ChatCompletionMessageParam } from 'openai/resources';
import { Message } from 'telegraf/typings/core/types/typegram';

@Injectable()
export class AssistantCommandsService {
  constructor(
    private assistantService: OpenaiAssistantService,
    private settings: AssistantSettingsService,
  ) {}

  files = async (ctx: Context) => {
    try {
      const filesStatus = await this.assistantService.getAllfiles();
      if ('errorMessages' in filesStatus) {
        return ctx.reply(
          `üìÇ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª–∞–º ${filesStatus.errorMessages}`,
        );
      }
      if (filesStatus.data.length === 0) {
        return ctx.reply('üìÇ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤');
      }

      const files = filesStatus.data.map((file) => {
        return `üìÇ ${file.filename}: id: ${file.id}`;
      });
      return ctx.reply(files.join('\n'));
    } catch (error) {
      console.error('Error in files method:', error);
      return ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–æ–≤');
    }
  };

  assistantMenu = async (ctx: Context) => {
    try {
        const assistantStatus = await this.settings.getSettings(ctx.from.id);
        if ('errorMessages' in assistantStatus) {
          return ctx.reply(
            `üìÇ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ ${assistantStatus.errorMessages}`,
          );
        }

      const updatedData = assistantStatus.data.map((item) => ({
        ...item,
        activated: false,
      }));

      const saveSettingsStatus = this.settings.saveSettings(
        ctx.from.id,
        updatedData,
      );

      if ('errorMessages' in saveSettingsStatus) {
        return ctx.reply(
          `üìÇ –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ ${saveSettingsStatus.errorMessages}`,
        );
      }

      const menu = assistantStatus.data
        .filter((item) => item.name)
        .map((item, index) => {
          let status: string = '';
          console.log(item);
          if ('activated' in item && item.activated) {
            status = item.activated ? '‚úÖ ' : '';
          }
          return [
            Markup.button.callback(
              `${status}${item.name}`,
              'button' + (index + 1),
            ),
          ];
        });

      return ctx.reply('–°–ø–∏—Å–æ–∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤', Markup.inlineKeyboard(menu));
    } catch (error) {
      console.error('Error in assistantMenu method:', error);
      return ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ–Ω—é –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞');
    }
  };

  setAssistantSettings = async (ctx: Context) => {
    try {
      const userId = ctx.from.id;
      if ('match' in ctx && Array.isArray(ctx.match)) {
        let lastDigitRegex = ctx.match[0].match(/\d+$/) - 1;
        const settingsStatus = await this.settings.getSettings(userId);

        if ('errorMessages' in settingsStatus) {
          return ctx.reply(
            `üìÇ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ ${settingsStatus.errorMessages}`,
          );
        }

        const settingsUpdate = settingsStatus.data.map((setting) => ({
          ...setting,
          activated: false,
        }));

        if (
          lastDigitRegex >= 0 &&
          lastDigitRegex < settingsStatus.data.length
        ) {
          settingsUpdate[lastDigitRegex].activated = true;
        }

        const saveSettingsStatus = this.settings.saveSettings(
          userId,
          settingsUpdate,
        );
        if ('errorMessages' in saveSettingsStatus) {
          return ctx.reply(
            `üìÇ –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ ${saveSettingsStatus.errorMessages}`,
          );
        }
        ctx.reply('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
      }
    } catch (error) {
      console.error('Error in setAssistantSettings method:', error);
      return ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞');
    }
  };

  text = async (ctx: Context) => {
    try {
      if (!('text' in ctx.message)) return;

      const assistantStatus = await this.settings.getSettings(ctx.from.id);
      if ('errorMessages' in assistantStatus) {
        return ctx.reply(
          `üìÇ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ ${assistantStatus.errorMessages}`,
        );
      }

      const assistant = assistantStatus.data.find((item) => item.activated);
      if (!assistant) {
        return ctx.reply('‚ö†Ô∏è –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω');
      }

      let threadStatus = await this.assistantService.getAllThread();
      if ('errorMessages' in threadStatus) {
        return ctx.reply(
          `üìÇ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–æ—Ç–æ–∫–∞–º ${threadStatus.errorMessages}`,
        );
      }

      if (threadStatus.data.length === 0) {
        const newThreadStatus = await this.assistantService.createThread();
        threadStatus.data[0] = newThreadStatus.data;
        if ('errorMessages' in newThreadStatus) {
          return ctx.reply(
            `üìÇ –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ ${newThreadStatus.errorMessages}`,
          );
        }
      }

      const maxCreatedAt = threadStatus.data.reduce(
        (max, current) => (current.created_at > max.created_at ? current : max),
        threadStatus.data[0],
      );

      const runChatStatus = await this.assistantService.startDialog(
        ctx.message.text,
        assistant.id,
        maxCreatedAt.id,
      );

      if ('errorMessages' in runChatStatus) {
        return ctx.reply(
          `üìÇ –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –¥–∏–∞–ª–æ–≥ ${runChatStatus.errorMessages}`,
        );
      }

      const messagesSplit = this.splitMessage(runChatStatus.data, 4096);

      for (const message of messagesSplit) {
        await ctx.reply(message);
      }
      return;
    } catch (error) {
      console.error('Error in message method:', error);
      return ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è');
    }
  };

  reset = async (ctx: Context) => {
    try {
      const userId = String(ctx.from.id);
      const newThreadStatus = await this.assistantService.createThread(
        [],
        userId,
      );

      if ('errorMessages' in newThreadStatus) {
        return ctx.reply(
          `üìÇ –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ ${newThreadStatus.errorMessages}`,
        );
      }
      return ctx.reply('üìÇ –î–∏–∞–ª–æ–≥ —Å–±—Ä–æ—à–µ–Ω, —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥');
    } catch (error) {
      console.error('Error in reset method:', error);
      return ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –¥–∏–∞–ª–æ–≥–∞');
    }
  };

  file = async (ctx: Context) => {
    try {
      if (!('document' in ctx.message)) return;

      const sendMessage = await ctx.reply(
        'üîÑ –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞...',
      );
      const fileId = ctx.message.document.file_id;
      const fileName = ctx.message.document.file_name;
      const userId = ctx.from.id;
      const fileExtension = fileName.split('.').pop();

      const link = await ctx.telegram.getFileLink(fileId);
      const filePath = `./sessions/${userId}.${fileExtension}`;

      await this.editMessageText(ctx, sendMessage, 'üîÑ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...');

      const fileSaveStatus = await this.downloadFile(`${link}`, filePath);
      if ('errorMessages' in fileSaveStatus) {
        return ctx.reply(fileSaveStatus.errorMessages);
      }

      const createFileStatus = await this.assistantService.uploadFile(filePath);
      if ('errorMessages' in createFileStatus) {
        return ctx.reply(
          `üìÇ –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª ${createFileStatus.errorMessages}`,
        );
      }

      const deleteFileStatus = this.deleteFile(filePath);

      if ('errorMessages' in deleteFileStatus) {
        return ctx.reply(deleteFileStatus.errorMessages);
      }

      await this.editMessageText(
        ctx,
        sendMessage,
        'üîÑ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...',
      );

      const createVectorStoreStatus =
        await this.assistantService.createVectorStore(fileName, [
          createFileStatus.data.id,
        ]);  

      if ('errorMessages' in createVectorStoreStatus) {
        return ctx.reply(
          `üìÇ –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ ${createVectorStoreStatus.errorMessages}`,
        );
      }

      const createThreadStatus = await this.assistantService.createThread([
        createVectorStoreStatus.data.id,
      ]);

      if ('errorMessages' in createThreadStatus) {
        return ctx.reply(
          `üìÇ –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ—Ç–æ–∫ ${createThreadStatus.errorMessages}`,
        );
      }

      return await this.editMessageText(
        ctx,
        sendMessage,
        '‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω',
      );
    } catch (error) {
      console.error('Error in file method:', error);
      return ctx.reply(
        `‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: ${error.message}`,
      );
    }
  };

  private async downloadFile(fileUrl: string, outputLocationPath: string) {
    try {
      const writer = fs.createWriteStream(outputLocationPath);

      const response = await axios({
        method: 'get',
        url: fileUrl,
        responseType: 'stream',
      });

      return new Promise<{ data: string } | { errorMessages: string }>(
        (resolve, reject) => {
          response.data.pipe(writer);
          let error: null | Error = null;
          writer.on('error', (err) => {
            error = err;
            writer.close();
            reject({ errorMessages: '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞' });
          });
          writer.on('close', () => {
            if (!error) {
              resolve({ data: '–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω' });
            }
          });
        },
      );
    } catch (error) {
      console.error('Error in downloadFile method:', error);
      throw new Error('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞');
    }
  }

  private splitMessage(message: string, limit = 4096) {
    var parts = [];
    while (message.length > 0) {
      if (message.length > limit) {
        let part = message.slice(0, limit);
        let cutAt = part.lastIndexOf(' ');
        part = part.slice(0, cutAt);
        parts.push(part);
        message = message.slice(cutAt);
      } else {
        parts.push(message);
        message = '';
      }
    }
    return parts;
  }

  private deleteFile(filePath: string) {
    try {
      fs.unlinkSync(filePath);
      return { data: '–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω' };
    } catch (error) {
      console.error('Error in deleteFile method:', error);
      return {
        errorMessages: `‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ ${error}`,
      };
    }
  }

  private async editMessageText(
    ctx: Context,
    oldMessage: Message.TextMessage,
    newMessage: string,
    markdown = false,
  ) {
    try {
      if (newMessage.trim() === '') return;
      await ctx.telegram.editMessageText(
        oldMessage.chat.id,
        oldMessage.message_id,
        null,
        newMessage,
        markdown ? { parse_mode: 'Markdown' } : {},
      );
    } catch (error) {
      const errorMessages = `‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ${error.message}`;
      console.error('Error in editMessageText method:', error);
      throw new Error(errorMessages);
    }
  }

  /*  private async streamMessage(ctx: IBotContext, message: string) {
    try {
      const sendMessage = await ctx.reply(
        'üîÑ –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...',
      );

      const session: ChatCompletionMessageParam[] =
        await this.sessionService.getSession(ctx.from.id);
      session.push(this.openAiService.createUserMessage(message));

      const streamResponse = await this.openAiService.streamResponse(session);

      if ('error' in streamResponse) {
        ctx.reply(streamResponse.content);
        return;
      }

      let messageContent = '';

      if (streamResponse instanceof Stream) {
        let lastCallTime = Date.now();
        for await (const part of streamResponse) {
          const currentTime = Date.now();
          messageContent += part.choices[0]?.delta?.content || '';
          if (currentTime - lastCallTime > 1000) {
            lastCallTime = currentTime;
            await this.editMessageText(ctx, sendMessage, messageContent);
          }
        }

        await this.editMessageText(ctx, sendMessage, messageContent, true);
        session.push(this.openAiService.createAssistantMessage(messageContent));
        this.sessionService.saveSession(ctx.from.id, session);
      }
    } catch (error) {
      console.error(error);
      this.handleError(error, ctx);
    }
  } */
}
